name: Deploy docs to Github Pages

on:
  release:
    types:
      - "published"

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    name: Build docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.0

      - id: setup-python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: "3.10"

      - uses: snok/install-poetry@v1.3.4
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3.3.2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction

      - name: Build docs
        run: poetry run python -m mkdocs build

      - uses: actions/upload-pages-artifact@v2.0.0
        with:
          path: ./site

  define_group:
    name: Define concurrency group
    runs-on: ubuntu-latest
    outputs:
      group: ${{ steps.group.outputs.group }}
    steps:
      - name: Get if the next concurrency group
        id: group
        run: |
          if [ ${{ github.event.prerelease }} = true ]; then
              GROUP="prerelease"
          else
              GROUP=""
          fi
          echo "group=$GROUP" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy docs
    concurrency:
      group: pages-${{ needs.define_group.outputs.group }}
      cancel-in-progress: true
    environment:
      name: github-pages-${{ needs.define_group.outputs.group }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs:
      - build
      - define_group
    steps:
      - name: Deploy to Github Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.0
